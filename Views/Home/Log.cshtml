@{ 
    ViewData["Title"] = "Ход Работы";
}
<body>
    <style> 
        html {
            scroll-behavior : smooth; 
        }
    </style> <!--будет красиво скроллить)-->
    <div class="text-center">
        <a href="https://github.com/LenaKotik/ProektPrimakov">Исходный код приложения</a><br />
        <a href="https://github.com/LenaKotik/HistoryServer">Исходный код этого сайта</a>
        <hr/>
        <p id="text">
            <h1>Ход работы</h1>
            Создан новый проект WinForms C# .NET 3.1
            Создан класс Node наследуемый от <code>System.Windows.Forms.UserControl</code>
            (Модель, хранящая и отображающая данные определённого правителя)
            Создан файл <ins>Node.cs</ins>, Авто сгенерированы файлы <ins>Node.Designer.cs</ins> и <ins>Node.resx</ins>
            В класс Node добавлены поля <code>System.Windows.Forms.Label</code> label1, label2
            <code>System.Windows.Forms.PictureBox</code> pictureBox1
            В <ins>Resources.resx</ins> добавлены фотографии всех членов семьи Романовых, указанных в древе
            На Form1 (главную форму) добавлены экземпляры Node для каждого правителя.
            Методом хардкода записаны данные о правителе, и расположении на форме для каждого <code>Node</code>'a
            Добавлен обработчик <code>Form1.Draw(object, PaintEventArgs)</code>, для события <code>PaintEventHandler Form1.Paint</code>
            В методе <code>Form.Draw(object, PaintEventArgs)</code> прорисовываются линии между членами семьи, символизирующие кровные связи
            Добавлена форма Form2, на ней будет отображаться конкретная информация о конкретном правителе эпохи дворцовых
            переворотов. На форме присутствует <code>System.Windows.Forms.PictureBox</code> pictureBox1 и <code>System.Windows.Forms.RichTextBox</code> richTextBox1
            (Это было временное решение, в последствие мы написали цикл, проходящий по всем строчкам текста и создающий <code>System.Windows.Froms.Label</code> на каждой итерации)
            Написана перегрузка конструктора Form2, принимающая аргументы <code>string data</code> и <code>System.Drawing.Image</code> image
            И передаёт значения свойствам <ins>richTextBox1.Text</ins> и <ins>pictureBox1.Image</ins> соответственно
            Начата разработка викторины, создана форма Quiz, она будет отображать пользователю вопрос, и следить за событиями кнопок-ответов. Добавлена кнопка, включающая викторину в Form1(главной форме) при нажатии на неё, создаётся новый экземпляр Quiz, в контруктор передаются заранее перемешанные вопросы из переменной (см. конструктор Quiz). Кроме Label с вопросом и 4мя Button, на форму Quiz добавлены ещё три Label, первый отображает сколько вопросов решено (из 10), второй — сколько осталось времени на решение (на каждый вопрос по 10 секунд), а третий — сколько баллов стоит данный вопрос (всего 24 балла за правильные ответы на все вопросы)
            А ещё <var>ProgressBar</var> и <var>Timer</var>.
            Интервал таймера стоит на 100мс (0.1с)
            Обработчик события <em>Timer.Tick</em> для таймера декрементирует переменную <strong>left</strong>, проверяет её же: если значение 0, открывается следующий вопрос (или страница с результатом, если вопрос был последний) и совершает шаг ProgressBar'а а также обновляет текст Label'a-счетчика времени
            Конструктор <em>Quiz</em> принимает словарь данных для викторины (<code>Dictionary<string, int></code>)
            где ключ это строка вида <em>"{вопрос}:{правильный ответ};{неправильный ответ 1};{неправильный ответ 2};{неправильный ответ 3}"</em>, а значение это цена вопроса в баллах. Кроме этого конструктор принимает время на решение и номер вопроса. Случайным образом выбирается один вопрос, удаляется из словаря, разделяется на вопрос и варианты ответов, вопрос записывается в <code>Label.Text</code>, ответы – в <code>Button.Text</code> для каждой кнопки, в случайном порядке, при нажатии на одну из кнопок, обработчик события "отрезает" сам себя от кнопок (таким образом, если нажать на любую из кнопок, нельзя будет нажать повторно ни на одну из них), после этого он проверяет, выбран ли правильный ответ, если да, то помечает его зелёным цветом (меняет свойство Button.BackColor) и прибавляет цену задания к общим баллам, иначе, помечает красным цветом выбранный вариант, и зелёным цветом правильный.
            Добавлена форма <mark>Result</mark>, на ней отображаются результаты викторины:
            <ul class="text-left">
                <li>Количество баллов</li>
                <li>Процент правильных ответов</li>
                <li>
                    Оценка по 5бальной шкале, которая расчитывается по следующей формуле: <br />
                    <mark>p/100*5</mark>, где p это процент правильных ответов
                </li>
            </ul>
            <hr />
            Создан новый проект <mark>Asp.Net MVC (Model-view-controller)</mark>. Изменены автоматически сгенерированные файлы <ins>Index.cshtml</ins> и <ins>_Layout.cshtml</ins>, <ins>Privacy.cshtml</ins> изменён на <ins>Result.cshtml</ins> (перемещен в папку <ins>Views/Quiz</ins> из <ins>Views/Home</ins>). Добавлен контроллер <code>QuizController</code> И razor страница <ins>Quiz.cshtml</ins>. Добавлены модели <code>Database</code> (статический), <code>Student</code>, <code>Question</code>, <code>Questions</code> (статический).
            Модель <code>Student</code>(ученик) Структура данных, для хранения и обмена данными об учениках, принявших участие в викторине.
            Модель <code>Question</code> (вопрос) структура данных, для хранения и обмена данными о вопросах, задаваемых в викторине
            Модель <code>Questions</code> (вопросы) синглтон (статический класс) для хранения и использования объектов Question
            Модель <code>Database</code> (база данных) синглтон (статический класс) для отправки запросов SQL серверу. Для этого использует классы <code>SQLConnection</code> и <code>SQLCommand</code> из библиотеки <code>System.Data.SqlClient</code>.
            <code>HomeController</code> отвечает на запросы, начинающиеся с <em>"https://historyserver20211206012050.azurewebsites.net"</em>, он имеет метод Index <em>(GET "https://historyserver20211206012050.azurewebsites.net")</em>, возвращающий главную страницу, и метод <code>Table(int?)</code> <em>(GET "https://historyserver20211206012050.azurewebsites.net/Table") || (GET "https://historyserver20211206012050.azurewebsites.net/Table?n=0")</em>, возвращающий страницу с таблицей для браузера в первом случае, и <var>JSON</var> строку для приложения во втором
            <code>QuizController</code> отвечает на запросы начинающиеся с <em>"https://historyserver20211206012050.azurewebsites.net/Quiz"</em>.
            Он имеет метод <code>Quiz(int)</code>, с атрибутом <pre>[HttpGet("https://historyserver20211206012050.azurewebsites.net/Quiz/{num}")]</pre> это значит, что при отправлении запроса
            <em>"https://historyserver20211206012050.azurewebsites.net/Quiz/5"</em> это будет вызывать <code>Quiz(5)</code> и открывать 5 вопрос по списку.
            В Quiz.cshtml написан <mark id="bad-programming-language">JavaScript</mark> код для <ins>frontend</ins> части, отвечающий за таймер, кнопки, и переходы.
            В Result.cshtml присутствует форма, отправляющая запрос POST, контроллер в свою очередь отправляет запрос в базу данных на добавление записи через Database.Send, и возвращает Redirect на страницу с таблицей
            На запрос <em>"https://historyserver20211206012050.azurewebsites.net/home/download"</em> контроллер Home ответит потоком данных, в буфере которого массив байтов из внедреного файла ресурсов — это архив с проектом

            После создания сайта, в приложение добавлена новая форма – <code>LeaderBoards</code>
            На ней присутствует <code>DataGridView</code>, в конструкторе она, используя класс <code>HttpClient</code> из библиотеки <code>System.Net.Http</code>
            Отправляет HTTP запрос на сервер, в качестве ответа ожидает <var>JSON</var> строку, сериализует полученную строку используя <code>JsonSerializer</code> из <code>System.Text.Json</code>, а после этого ставит её как источник данных у <code>DataGridView</code>
            Также, созданна форма на странице с результатом, отправляющая на сервер данные об имени и результате пользователя
            <br />
            Возникла проблема с кодировкой текста: базы данных используют кодировку <abbr title="American Standart Code [for] Information Interchange">ASCII</abbr>,
            Она включает в себя только латинские буквы, цифры и специальные символы, если попытатся вбить в базу любые други символы (например, Юникодовские русские буквы)
            эти символы будут заменены на "?". По этой причине до сих пор нельзя было использовать русские буквы в именах пользователей.
            Мы решили эту проблему добавив "Двойное шифрование": мы создали новый класс <code>DoubleEncoding</code> (файл <ins>DoubleEncoding.cs</ins>, общий для обоих проектов)
            он имеет два публичных метода - <code>string Encode(string)</code> и <code>string Decode(string)</code>.
            чтобы зашифровать текст, мы проходим циклом по каждому символу в строке, и ищем этот символ в другой строке: allowedChars
            индекс символа в строке allowedChars будет нашим "ключем" к этому символу(для символов, которых нет в allowedChars, ключем будет -1).
            мы записываем наши ключи через точку и получаем "зашифрованную" строку вроде этой: <mark>103.57.63.69.57.71</mark> 
            и эта зашифрованная строка теперь сохраняется в БД без проблем, а имея строку allowedChars, использованную чтобы "зашифровать" текст
            мы можем его "расшифровать", что и делает метод <code>string Decode(string)</code>.
            Кроме того, за счёт того что мы сами выбираем, какие символы доступны пользователям, мы можем исключить любые <var>XSS</var> атаки,
            и в связи с тем что в базу данных попадают только зашифрованные строки, состояшие из цифр и точек, не имеют места быть и <var>SQL injection</var> атаки.
            Также, следует отметить, что сайт не имеет входных точек для файлов или URL, это исключает <var>Remote Code Execution</var> и <var>SSRF</var> атаки соответственно
            и, в конце концов, сайт использует cookie файлы самым безобидным образом, поэтому <var>CSRF</var> атаки не работают.
            Это всё делает данный сайт <ins>почти</ins> неуязвимым.
        </p>
        <a href="#text">Наверх</a>
    </div>
</body>